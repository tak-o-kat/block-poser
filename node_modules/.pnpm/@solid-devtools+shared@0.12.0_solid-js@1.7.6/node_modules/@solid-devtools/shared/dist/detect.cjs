"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/detect.ts
var detect_exports = {};
__export(detect_exports, {
  DATA_HYDRATION_KEY: () => DATA_HYDRATION_KEY,
  SOLID_DEVTOOLS_GLOBAL: () => SOLID_DEVTOOLS_GLOBAL,
  SOLID_DEV_GLOBAL: () => SOLID_DEV_GLOBAL,
  detectSolid: () => detectSolid,
  detectSolidDev: () => detectSolidDev,
  detectSolidDevtools: () => detectSolidDevtools,
  onSolidDevDetect: () => onSolidDevDetect,
  onSolidDevtoolsDetect: () => onSolidDevtoolsDetect
});
module.exports = __toCommonJS(detect_exports);

// src/utils.ts
function interceptPropertySet(obj, key, cb) {
  const descriptor = Object.getOwnPropertyDescriptor(obj, key);
  if (!descriptor) {
    let value = obj[key];
    Object.defineProperty(obj, key, {
      set(newValue) {
        value = newValue;
        cb(newValue);
      },
      get() {
        return value;
      }
    });
    return;
  }
  const { set } = descriptor;
  if (!set)
    return;
  Object.defineProperty(obj, key, {
    set(value) {
      cb(value);
      set.call(this, value);
    },
    get() {
      return descriptor.get?.call(this);
    }
  });
}

// src/detect.ts
var DATA_HYDRATION_KEY = "data-hk";
var SOLID_DEV_GLOBAL = "Solid$$";
async function detectSolid() {
  if (detectSolidDev())
    return true;
  const $hy = window._$HY;
  if ($hy && typeof $hy === "object" && "completed" in $hy && $hy.completed instanceof WeakSet)
    return true;
  const bodyFirstEl = document.body.firstElementChild;
  if (bodyFirstEl && bodyFirstEl.hasAttribute(DATA_HYDRATION_KEY))
    return true;
  const scripts = document.querySelectorAll("script");
  const attributeHydrateKeyNameRegex = new RegExp(
    `(?:has|get)Attribute\\(["']${DATA_HYDRATION_KEY}["']\\)`
  );
  for (const script of scripts) {
    if (script.textContent?.match(attributeHydrateKeyNameRegex))
      return true;
    if (script.type !== "module" || script.crossOrigin !== "anonymous" || script.src.match(/^chrome-extension/))
      continue;
    const result = await fetch(script.src);
    const text = await result.text();
    if (text.match(/\$DX_DELEGATE/) || text.match(attributeHydrateKeyNameRegex))
      return true;
  }
  return false;
}
function detectSolidDev() {
  return !!window[SOLID_DEV_GLOBAL];
}
function onSolidDevDetect(callback) {
  if (detectSolidDev())
    queueMicrotask(callback);
  else
    interceptPropertySet(
      window,
      SOLID_DEV_GLOBAL,
      (value) => value === true && queueMicrotask(callback)
    );
}
var SOLID_DEVTOOLS_GLOBAL = "SolidDevtools$$";
function detectSolidDevtools() {
  return !!window[SOLID_DEVTOOLS_GLOBAL];
}
function onSolidDevtoolsDetect(callback) {
  if (detectSolidDevtools())
    queueMicrotask(callback);
  else
    interceptPropertySet(
      window,
      SOLID_DEVTOOLS_GLOBAL,
      (value) => value && queueMicrotask(callback)
    );
}
