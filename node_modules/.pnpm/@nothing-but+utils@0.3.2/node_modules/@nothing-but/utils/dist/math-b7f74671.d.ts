declare const random: (max: number) => number;
declare const randomFrom: (min: number, max: number) => number;
declare const randomInt: (max: number) => number;
declare const randomIntFrom: (min: number, max: number) => number;
declare const clamp: (value: number, min: number, max: number) => number;
declare const remainder: (a: number, b: number) => number;
declare const wrap: (value: number, min: number, max: number) => number;
declare const bounce: (value: number, min: number, max: number) => number;
declare const mapRange: (value: number, in_min: number, in_max: number, out_min: number, out_max: number) => number;
declare const toPercent: (value: number, min: number, max: number) => number;
declare const numberEquals: (a: number, b: number) => boolean;
declare const between: (a: number, b: number, c: number) => boolean;
declare const rangesIntersecting: (a1: number, b1: number, a2: number, b2: number) => boolean;

declare const math_between: typeof between;
declare const math_bounce: typeof bounce;
declare const math_clamp: typeof clamp;
declare const math_mapRange: typeof mapRange;
declare const math_numberEquals: typeof numberEquals;
declare const math_random: typeof random;
declare const math_randomFrom: typeof randomFrom;
declare const math_randomInt: typeof randomInt;
declare const math_randomIntFrom: typeof randomIntFrom;
declare const math_rangesIntersecting: typeof rangesIntersecting;
declare const math_remainder: typeof remainder;
declare const math_toPercent: typeof toPercent;
declare const math_wrap: typeof wrap;
declare namespace math {
  export {
    math_between as between,
    math_bounce as bounce,
    math_clamp as clamp,
    math_mapRange as mapRange,
    math_numberEquals as numberEquals,
    math_random as random,
    math_randomFrom as randomFrom,
    math_randomInt as randomInt,
    math_randomIntFrom as randomIntFrom,
    math_rangesIntersecting as rangesIntersecting,
    math_remainder as remainder,
    math_toPercent as toPercent,
    math_wrap as wrap,
  };
}

export { randomFrom as a, randomInt as b, randomIntFrom as c, clamp as d, remainder as e, bounce as f, mapRange as g, between as h, rangesIntersecting as i, math as m, numberEquals as n, random as r, toPercent as t, wrap as w };
