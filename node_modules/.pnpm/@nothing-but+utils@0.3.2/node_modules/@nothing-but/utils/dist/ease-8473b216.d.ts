/**
 * No easing, no acceleration
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function linear(t: number): number;
/**
 * Slight acceleration from zero to full speed
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inSine(t: number): number;
/**
 * Slight deceleration at the end
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function outSine(t: number): number;
/**
 * Slight acceleration at beginning and slight deceleration at end
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inOutSine(t: number): number;
/**
 * Accelerating from zero velocity
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inQuad(t: number): number;
/**
 * Decelerating to zero velocity
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function outQuad(t: number): number;
/**
 * Acceleration until halfway, then deceleration
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inOutQuad(t: number): number;
/**
 * Accelerating from zero velocity
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inCubic(t: number): number;
/**
 * Decelerating to zero velocity
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function outCubic(t: number): number;
/**
 * Acceleration until halfway, then deceleration
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inOutCubic(t: number): number;
/**
 * Accelerating from zero velocity
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inQuart(t: number): number;
/**
 * Decelerating to zero velocity
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function outQuart(t: number): number;
/**
 * Acceleration until halfway, then deceleration
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inOutQuart(t: number): number;
/**
 * Accelerating from zero velocity
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inQuint(t: number): number;
/**
 * Decelerating to zero velocity
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function outQuint(t: number): number;
/**
 * Acceleration until halfway, then deceleration
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inOutQuint(t: number): number;
/**
 * Accelerate exponentially until finish
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inExpo(t: number): number;
/**
 * Initial exponential acceleration slowing to stop
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function outExpo(t: number): number;
/**
 * Exponential acceleration and deceleration
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inOutExpo(t: number): number;
/**
 * Increasing velocity until stop
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inCirc(t: number): number;
/**
 * Start fast, decreasing velocity until stop
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function outCirc(t: number): number;
/**
 * Fast increase in velocity, fast decrease in velocity
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inOutCirc(t: number): number;
/**
 * Slow movement backwards then fast snap to finish
 * @param t - The current time (between 0 and 1)
 * @param magnitude - The magnitude of the easing (default: 1.70158)
 * @returns The eased value
 */
declare function inBack(t: number, magnitude?: number): number;
/**
 * Fast snap to backwards point then slow resolve to finish
 * @param t - The current time (between 0 and 1)
 * @param magnitude - The magnitude of the easing (default: 1.70158)
 * @returns The eased value
 */
declare function outBack(t: number, magnitude?: number): number;
/**
 * Slow movement backwards, fast snap to past finish, slow resolve to finish
 * @param t - The current time (between 0 and 1)
 * @param magnitude - The magnitude of the easing (default: 1.70158)
 * @returns The eased value
 */
declare function inOutBack(t: number, magnitude?: number): number;
/**
 * Bounces slowly then quickly to finish
 * @param t - The current time (between 0 and 1)
 * @param magnitude - The magnitude of the easing (default: 0.7)
 * @returns The eased value
 */
declare function inElastic(t: number, magnitude?: number): number;
/**
 * Fast acceleration, bounces to zero
 * @param t - The current time (between 0 and 1)
 * @param magnitude - The magnitude of the easing (default: 0.7)
 * @returns The eased value
 */
declare function outElastic(t: number, magnitude?: number): number;
/**
 * Slow start and end, two bounces sandwich a fast motion
 * @param t - The current time (between 0 and 1)
 * @param magnitude - The magnitude of the easing (default: 0.7)
 * @returns The eased value
 */
declare function inOutElastic(t: number, magnitude?: number): number;
/**
 * Bounce to completion
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function outBounce(t: number): number;
/**
 * Bounce increasing in velocity until completion
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inBounce(t: number): number;
/**
 * Bounce in and bounce out
 * @param t - The current time (between 0 and 1)
 * @returns The eased value
 */
declare function inOutBounce(t: number): number;

declare const ease_inBack: typeof inBack;
declare const ease_inBounce: typeof inBounce;
declare const ease_inCirc: typeof inCirc;
declare const ease_inCubic: typeof inCubic;
declare const ease_inElastic: typeof inElastic;
declare const ease_inExpo: typeof inExpo;
declare const ease_inOutBack: typeof inOutBack;
declare const ease_inOutBounce: typeof inOutBounce;
declare const ease_inOutCirc: typeof inOutCirc;
declare const ease_inOutCubic: typeof inOutCubic;
declare const ease_inOutElastic: typeof inOutElastic;
declare const ease_inOutExpo: typeof inOutExpo;
declare const ease_inOutQuad: typeof inOutQuad;
declare const ease_inOutQuart: typeof inOutQuart;
declare const ease_inOutQuint: typeof inOutQuint;
declare const ease_inOutSine: typeof inOutSine;
declare const ease_inQuad: typeof inQuad;
declare const ease_inQuart: typeof inQuart;
declare const ease_inQuint: typeof inQuint;
declare const ease_inSine: typeof inSine;
declare const ease_linear: typeof linear;
declare const ease_outBack: typeof outBack;
declare const ease_outBounce: typeof outBounce;
declare const ease_outCirc: typeof outCirc;
declare const ease_outCubic: typeof outCubic;
declare const ease_outElastic: typeof outElastic;
declare const ease_outExpo: typeof outExpo;
declare const ease_outQuad: typeof outQuad;
declare const ease_outQuart: typeof outQuart;
declare const ease_outQuint: typeof outQuint;
declare const ease_outSine: typeof outSine;
declare namespace ease {
  export {
    ease_inBack as inBack,
    ease_inBounce as inBounce,
    ease_inCirc as inCirc,
    ease_inCubic as inCubic,
    ease_inElastic as inElastic,
    ease_inExpo as inExpo,
    ease_inOutBack as inOutBack,
    ease_inOutBounce as inOutBounce,
    ease_inOutCirc as inOutCirc,
    ease_inOutCubic as inOutCubic,
    ease_inOutElastic as inOutElastic,
    ease_inOutExpo as inOutExpo,
    ease_inOutQuad as inOutQuad,
    ease_inOutQuart as inOutQuart,
    ease_inOutQuint as inOutQuint,
    ease_inOutSine as inOutSine,
    ease_inQuad as inQuad,
    ease_inQuart as inQuart,
    ease_inQuint as inQuint,
    ease_inSine as inSine,
    ease_linear as linear,
    ease_outBack as outBack,
    ease_outBounce as outBounce,
    ease_outCirc as outCirc,
    ease_outCubic as outCubic,
    ease_outElastic as outElastic,
    ease_outExpo as outExpo,
    ease_outQuad as outQuad,
    ease_outQuart as outQuart,
    ease_outQuint as outQuint,
    ease_outSine as outSine,
  };
}

export { inElastic as A, outElastic as B, inOutElastic as C, outBounce as D, inBounce as E, inOutBounce as F, inOutSine as a, inQuad as b, outQuad as c, inOutQuad as d, ease as e, inCubic as f, outCubic as g, inOutCubic as h, inSine as i, inQuart as j, outQuart as k, linear as l, inOutQuart as m, inQuint as n, outSine as o, outQuint as p, inOutQuint as q, inExpo as r, outExpo as s, inOutExpo as t, inCirc as u, outCirc as v, inOutCirc as w, inBack as x, outBack as y, inOutBack as z };
