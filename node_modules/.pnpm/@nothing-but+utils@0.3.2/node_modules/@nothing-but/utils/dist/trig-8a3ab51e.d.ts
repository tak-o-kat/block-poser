import { P as Position } from './types-75920b8b.js';

/**
 * Represents a template string type in the format `(${number}, ${number})`.
 *
 * Useful for storing in a Set or Map to check if a point exists.
 */
type VectorString = `(${number}, ${number})`;
/**
 * Represents a 2D vector with x and y components.
 */
declare class Vector {
    x: number;
    y: number;
    /**
     * Creates a new vector instance.
     * @param str - A string in the format `(${number}, ${number})`.
     *
     * OR
     *
     * @param vec - A Point object to copy the x and y components from.
     *
     * OR
     *
     * @param x - The x-component of the vector.
     * @param y - The y-component of the vector.
     */
    constructor(str: VectorString);
    constructor(vec: Position);
    constructor(x: number, y?: number);
    [Symbol.iterator](): Generator<number, void, unknown>;
    toString(): VectorString;
    toJSON(): Position;
}
/**
 * Creates a new vector instance.
 */
declare const vector: {
    (str: VectorString): Vector;
    (vector: Position): Vector;
    (x: number, y?: number): Vector;
};
/**
 * A constant vector representing the zero vector.
 */
declare const ZERO: Vector;
/**
 * Creates a new vector instance representing the zero vector.
 * @returns A vector instance representing the zero vector.
 */
declare const zero: () => Vector;
/**
 * Checks if two vectors are equal.
 */
declare function vectorEquals(a: Vector, b: Vector): boolean;
/**
 * Subtracts a vector from another vector in place. The first vector is **mutated**.
 */
declare function vectorSubtract(a: Vector, b: Vector): void;
/**
 * Calculates the difference between two vectors.
 * @returns The difference vector.
 */
declare function vectorDifference(a: Vector, b: Vector): Vector;
/**
 * Adds a vector or a force to another vector in place. The first vector is **mutated**.
 */
declare function vectorAdd(vec: Vector, velocity: Vector | Force | number): void;
declare function vectorAdd(vec: Vector, x: number, y: number): void;
/**
 * Calculates the sum of two vectors.
 * @returns The sum vector.
 */
declare function vectorSum(a: Vector, b: Vector): Vector;
/**
 * Multiplies a vector by another vector or a scalar in place. The first vector is **mutated**.
 */
declare function vectorMultiply(a: Vector, b: Vector | number): void;
/**
 * Calculates the product of two vectors.
 * @returns The product vector.
 */
declare function vectorProduct(a: Vector, b: Vector): Vector;
/**
 * Divides a vector by another vector in place. The first vector is **mutated**.
 */
declare function vectorDivide(a: Vector, b: Vector): void;
/**
 * Calculates the quotient of two vectors.
 * (The first vector is divided by the second vector.)
 * @returns The quotient vector.
 */
declare function vectorQuotient(a: Vector, b: Vector): Vector;
/**
 * Calculates the distance between two vectors.
 * @returns The distance between the vectors.
 */
declare function vectorDistance(a: Vector, b: Vector): number;
/**
 * Calculates the angle between two vectors.
 * @returns The angle between the vectors in radians.
 */
declare function vectorAngle(a: Vector, b: Vector): number;
/**
 * Rotates the {@link point} vector by {@link rad} angle (origin is 0,0).
 * The first vector is **mutated**.
 */
declare function vectorRotate(point: Vector, rad: number): void;
/**
 * Rotates the {@link point} vector around {@link origin} by {@link rad} angle.
 * The first vector is **mutated**.
 * @param point - The vector to rotate.
 * @param origin - The origin of the rotation.
 * @param rad - The angle of rotation in radians.
 */
declare function vectorRotateAround(point: Vector, origin: Vector, rad: number): void;
/**
 * Represents a force with magnitude and angle in 2D space.
 */
declare class Force {
    /**
     * The magnitude of the force.
     */
    distance: number;
    /**
     * The angle of the force in radians.
     */
    angle: number;
    /**
     * Creates a new Force instance.
     * @param delta_x - The x-component of the vector representing the force.
     * @param delta_y - The y-component of the vector representing the force.
     *
     * OR
     *
     * @param distance - The magnitude of the force.
     * @param angle - The angle of the force in radians.
     */
    constructor(delta_x: Vector, delta_y: Vector);
    constructor(distance: number, angle: number);
    [Symbol.iterator](): Generator<number, void, unknown>;
}
/**
 * Creates a new Force instance.
 */
declare const force: {
    (a: Vector, b: Vector): Force;
    (distance: number, angle: number): Force;
};
/**
 * Converts a Force object to a vector object with x and y components.
 */
declare function forceTovector(f: Force): Vector;
declare function forceTovector(distance: number, angle: number): Vector;
/**
 * Represents a line segment with two endpoints.
 */
type Segment = [Vector, Vector];

type trig_Force = Force;
declare const trig_Force: typeof Force;
type trig_Segment = Segment;
type trig_Vector = Vector;
declare const trig_Vector: typeof Vector;
type trig_VectorString = VectorString;
declare const trig_ZERO: typeof ZERO;
declare const trig_force: typeof force;
declare const trig_forceTovector: typeof forceTovector;
declare const trig_vector: typeof vector;
declare const trig_vectorAdd: typeof vectorAdd;
declare const trig_vectorAngle: typeof vectorAngle;
declare const trig_vectorDifference: typeof vectorDifference;
declare const trig_vectorDistance: typeof vectorDistance;
declare const trig_vectorDivide: typeof vectorDivide;
declare const trig_vectorEquals: typeof vectorEquals;
declare const trig_vectorMultiply: typeof vectorMultiply;
declare const trig_vectorProduct: typeof vectorProduct;
declare const trig_vectorQuotient: typeof vectorQuotient;
declare const trig_vectorRotate: typeof vectorRotate;
declare const trig_vectorRotateAround: typeof vectorRotateAround;
declare const trig_vectorSubtract: typeof vectorSubtract;
declare const trig_vectorSum: typeof vectorSum;
declare const trig_zero: typeof zero;
declare namespace trig {
  export {
    trig_Force as Force,
    trig_Segment as Segment,
    trig_Vector as Vector,
    trig_VectorString as VectorString,
    trig_ZERO as ZERO,
    trig_force as force,
    trig_forceTovector as forceTovector,
    trig_vector as vector,
    trig_vectorAdd as vectorAdd,
    trig_vectorAngle as vectorAngle,
    trig_vectorDifference as vectorDifference,
    trig_vectorDistance as vectorDistance,
    trig_vectorDivide as vectorDivide,
    trig_vectorEquals as vectorEquals,
    trig_vectorMultiply as vectorMultiply,
    trig_vectorProduct as vectorProduct,
    trig_vectorQuotient as vectorQuotient,
    trig_vectorRotate as vectorRotate,
    trig_vectorRotateAround as vectorRotateAround,
    trig_vectorSubtract as vectorSubtract,
    trig_vectorSum as vectorSum,
    trig_zero as zero,
  };
}

export { Force as F, Segment as S, VectorString as V, ZERO as Z, Vector as a, vectorEquals as b, vectorSubtract as c, vectorDifference as d, vectorAdd as e, vectorSum as f, vectorMultiply as g, vectorProduct as h, vectorDivide as i, vectorQuotient as j, vectorDistance as k, vectorAngle as l, vectorRotate as m, vectorRotateAround as n, force as o, forceTovector as p, trig as t, vector as v, zero as z };
