import { N as Noop, A as AnyClass } from './types-75920b8b.js';

/** no operation */
declare const noop: Noop;
declare const trueFn: () => boolean;
declare const falseFn: () => boolean;
/**
 * Get entries of an object
 */
declare const entries: <T extends object>(obj: T) => [keyof T, T[keyof T]][];
/**
 * Get keys of an object
 */
declare const keys: <T extends object>(object: T) => (keyof T)[];
/**
 * Check if a value is a PlainObject. A PlainObject is an object with no prototype.
 */
declare const isPlainObject: (value: unknown) => value is Record<string, unknown>;
/**
 * Check if the value is an instance of ___
 */
declare const isOfClass: (v: any, c: AnyClass) => boolean;
/**
 * `a != null` is equivalent to `a !== null && a !== undefined`.
 *
 * Useful for filtering out `null` and `undefined` from an array.
 */
declare const isNonNullable: <T>(i: T) => i is NonNullable<T>;
/**
 * Returns a function that will call all functions in the order they were chained with the same arguments.
 */
declare function chain<Args extends [] | any[]>(callbacks: {
    [Symbol.iterator](): IterableIterator<((...args: Args) => any) | undefined>;
}): (...args: Args) => void;
/**
 * Returns a function that will call all functions in the reversed order with the same arguments.
 */
declare function reverseChain<Args extends [] | any[]>(callbacks: (((...args: Args) => any) | undefined)[]): (...args: Args) => void;

declare const misc_chain: typeof chain;
declare const misc_entries: typeof entries;
declare const misc_falseFn: typeof falseFn;
declare const misc_isNonNullable: typeof isNonNullable;
declare const misc_isOfClass: typeof isOfClass;
declare const misc_isPlainObject: typeof isPlainObject;
declare const misc_keys: typeof keys;
declare const misc_noop: typeof noop;
declare const misc_reverseChain: typeof reverseChain;
declare const misc_trueFn: typeof trueFn;
declare namespace misc {
  export {
    misc_chain as chain,
    misc_entries as entries,
    misc_falseFn as falseFn,
    misc_isNonNullable as isNonNullable,
    misc_isOfClass as isOfClass,
    misc_isPlainObject as isPlainObject,
    misc_keys as keys,
    misc_noop as noop,
    misc_reverseChain as reverseChain,
    misc_trueFn as trueFn,
  };
}

export { isOfClass as a, isNonNullable as b, chain as c, entries as e, falseFn as f, isPlainObject as i, keys as k, misc as m, noop as n, reverseChain as r, trueFn as t };
