/**
 * Check shallow array equality
 */
declare function equals(a: readonly unknown[], b: readonly unknown[]): boolean;
declare function wrap<T>(arr: readonly T[], index: number): T | undefined;
/**
 * Checks if both arrays contain the same values.
 * Order doesn't matter.
 * Arrays must not contain duplicates. (be the same lengths)
 */
declare function includesSameMembers(a: readonly unknown[], b: readonly unknown[]): boolean;
declare function deduped<T>(array: readonly T[]): T[];
declare function mutateFilter<T, S extends T>(array: T[], predicate: (value: T, index: number, array: T[]) => value is S): void;
declare function mutateFilter<T>(array: T[], predicate: (value: T, index: number, array: T[]) => unknown): void;
declare function remove<T>(array: T[], item: T): void;
declare const pickRandom: <T>(arr: readonly T[]) => T | undefined;
declare function pickRandomExclidingOne<T>(arr: readonly T[], excluding: T): T | undefined;
declare function randomIterate<T>(arr: readonly T[]): Generator<T | undefined, void, unknown>;
declare function binarySearch<T>(arr: readonly T[], item: T): number | undefined;
declare function binarySearchWith<T>(arr: readonly T[], item: T, getComparable: (item: T) => number): number | undefined;
declare function binaryInsertUnique<T>(arr: T[], item: T): void;
declare function binaryInsert<T>(arr: T[], item: T): void;
declare function binaryInsertWith<T>(arr: T[], item: T, getComparable: (item: T) => number): void;

declare const array_binaryInsert: typeof binaryInsert;
declare const array_binaryInsertUnique: typeof binaryInsertUnique;
declare const array_binaryInsertWith: typeof binaryInsertWith;
declare const array_binarySearch: typeof binarySearch;
declare const array_binarySearchWith: typeof binarySearchWith;
declare const array_deduped: typeof deduped;
declare const array_equals: typeof equals;
declare const array_includesSameMembers: typeof includesSameMembers;
declare const array_mutateFilter: typeof mutateFilter;
declare const array_pickRandom: typeof pickRandom;
declare const array_pickRandomExclidingOne: typeof pickRandomExclidingOne;
declare const array_randomIterate: typeof randomIterate;
declare const array_remove: typeof remove;
declare const array_wrap: typeof wrap;
declare namespace array {
  export {
    array_binaryInsert as binaryInsert,
    array_binaryInsertUnique as binaryInsertUnique,
    array_binaryInsertWith as binaryInsertWith,
    array_binarySearch as binarySearch,
    array_binarySearchWith as binarySearchWith,
    array_deduped as deduped,
    array_equals as equals,
    array_includesSameMembers as includesSameMembers,
    array_mutateFilter as mutateFilter,
    array_pickRandom as pickRandom,
    array_pickRandomExclidingOne as pickRandomExclidingOne,
    array_randomIterate as randomIterate,
    array_remove as remove,
    array_wrap as wrap,
  };
}

export { array as a, pickRandomExclidingOne as b, randomIterate as c, deduped as d, equals as e, binarySearch as f, binarySearchWith as g, binaryInsertUnique as h, includesSameMembers as i, binaryInsert as j, binaryInsertWith as k, mutateFilter as m, pickRandom as p, remove as r, wrap as w };
