import { __export } from './5ZKAE4VZ.js';

// src/trig.ts
var trig_exports = {};
__export(trig_exports, {
  Force: () => Force,
  Vector: () => Vector,
  ZERO: () => ZERO,
  force: () => force,
  forceTovector: () => forceTovector,
  vector: () => vector,
  vectorAdd: () => vectorAdd,
  vectorAngle: () => vectorAngle,
  vectorDifference: () => vectorDifference,
  vectorDistance: () => vectorDistance,
  vectorDivide: () => vectorDivide,
  vectorEquals: () => vectorEquals,
  vectorMultiply: () => vectorMultiply,
  vectorProduct: () => vectorProduct,
  vectorQuotient: () => vectorQuotient,
  vectorRotate: () => vectorRotate,
  vectorRotateAround: () => vectorRotateAround,
  vectorSubtract: () => vectorSubtract,
  vectorSum: () => vectorSum,
  zero: () => zero
});
var Vector = class {
  x;
  y;
  constructor(x, y) {
    if (typeof x === "string") {
      const [xStr, yStr] = x.slice(1, -1).split(", ");
      x = Number(xStr);
      y = Number(yStr);
    } else if (typeof x === "object") {
      y = x.y;
      x = x.x;
    }
    this.x = x;
    this.y = y ?? x;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
  }
  toString() {
    return `(${this.x}, ${this.y})`;
  }
  toJSON() {
    return { x: this.x, y: this.y };
  }
};
var vector = (...args) => new Vector(...args);
var ZERO = vector(0, 0);
var zero = () => vector(0, 0);
function vectorEquals(a, b) {
  return a.x === b.x && a.y === b.y;
}
function vectorSubtract(a, b) {
  a.x -= b.x;
  a.y -= b.y;
}
function vectorDifference(a, b) {
  return vector(a.x - b.x, a.y - b.y);
}
function vectorAdd(vec, x, y) {
  if (typeof x === "number") {
    vec.x += x;
    vec.y += y ?? x;
    return;
  }
  if (x instanceof Force) {
    x = forceTovector(x);
  }
  vec.x += x.x;
  vec.y += x.y;
}
function vectorSum(a, b) {
  return vector(a.x + b.x, a.y + b.y);
}
function vectorMultiply(a, b) {
  if (typeof b === "number") {
    a.x *= b;
    a.y *= b;
    return;
  }
  a.x *= b.x;
  a.y *= b.y;
}
function vectorProduct(a, b) {
  return vector(a.x * b.x, a.y * b.y);
}
function vectorDivide(a, b) {
  a.x /= b.x;
  a.y /= b.y;
}
function vectorQuotient(a, b) {
  return vector(a.x / b.x, a.y / b.y);
}
function vectorDistance(a, b) {
  const x = a.x - b.x;
  const y = a.y - b.y;
  return Math.sqrt(x * x + y * y);
}
function vectorAngle(a, b) {
  return Math.atan2(b.y - a.y, b.x - a.x);
}
function vectorRotate(point, rad) {
  const { x, y } = point, cos = Math.cos(rad), sin = Math.sin(rad);
  point.x = x * cos - y * sin;
  point.y = x * sin + y * cos;
}
function vectorRotateAround(point, origin, rad) {
  const { x, y } = point, { x: ox, y: oy } = origin, cos = Math.cos(rad), sin = Math.sin(rad);
  point.x = ox + (x - ox) * cos - (y - oy) * sin;
  point.y = oy + (x - ox) * sin + (y - oy) * cos;
}
var Force = class {
  /**
   * The magnitude of the force.
   */
  distance;
  /**
   * The angle of the force in radians.
   */
  angle;
  constructor(a, b) {
    if (typeof a === "object") {
      this.angle = vectorAngle(a, b);
      this.distance = vectorDistance(a, b);
    } else {
      this.distance = a;
      this.angle = b;
    }
  }
  *[Symbol.iterator]() {
    yield this.distance;
    yield this.angle;
  }
};
var force = (...args) => new Force(...args);
function forceTovector(distance, angle) {
  if (typeof distance === "object") {
    angle = distance.angle;
    distance = distance.distance;
  }
  const x = distance * Math.cos(angle);
  const y = distance * Math.sin(angle);
  return vector(x, y);
}

export { Force, Vector, ZERO, force, forceTovector, trig_exports, vector, vectorAdd, vectorAngle, vectorDifference, vectorDistance, vectorDivide, vectorEquals, vectorMultiply, vectorProduct, vectorQuotient, vectorRotate, vectorRotateAround, vectorSubtract, vectorSum, zero };
