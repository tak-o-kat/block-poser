import { __export } from './5ZKAE4VZ.js';

// src/ease.ts
var ease_exports = {};
__export(ease_exports, {
  inBack: () => inBack,
  inBounce: () => inBounce,
  inCirc: () => inCirc,
  inCubic: () => inCubic,
  inElastic: () => inElastic,
  inExpo: () => inExpo,
  inOutBack: () => inOutBack,
  inOutBounce: () => inOutBounce,
  inOutCirc: () => inOutCirc,
  inOutCubic: () => inOutCubic,
  inOutElastic: () => inOutElastic,
  inOutExpo: () => inOutExpo,
  inOutQuad: () => inOutQuad,
  inOutQuart: () => inOutQuart,
  inOutQuint: () => inOutQuint,
  inOutSine: () => inOutSine,
  inQuad: () => inQuad,
  inQuart: () => inQuart,
  inQuint: () => inQuint,
  inSine: () => inSine,
  linear: () => linear,
  outBack: () => outBack,
  outBounce: () => outBounce,
  outCirc: () => outCirc,
  outCubic: () => outCubic,
  outElastic: () => outElastic,
  outExpo: () => outExpo,
  outQuad: () => outQuad,
  outQuart: () => outQuart,
  outQuint: () => outQuint,
  outSine: () => outSine
});
function linear(t) {
  return t;
}
function inSine(t) {
  return -1 * Math.cos(t * (Math.PI / 2)) + 1;
}
function outSine(t) {
  return Math.sin(t * (Math.PI / 2));
}
function inOutSine(t) {
  return -0.5 * (Math.cos(Math.PI * t) - 1);
}
function inQuad(t) {
  return t * t;
}
function outQuad(t) {
  return t * (2 - t);
}
function inOutQuad(t) {
  return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
}
function inCubic(t) {
  return t * t * t;
}
function outCubic(t) {
  const t1 = t - 1;
  return t1 * t1 * t1 + 1;
}
function inOutCubic(t) {
  return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
}
function inQuart(t) {
  return t * t * t * t;
}
function outQuart(t) {
  const a = t - 1;
  return 1 - a * a * a * a;
}
function inOutQuart(t) {
  const a = t - 1;
  return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * a * a * a * a;
}
function inQuint(t) {
  return t * t * t * t * t;
}
function outQuint(t) {
  const a = t - 1;
  return 1 + a * a * a * a * a;
}
function inOutQuint(t) {
  const a = t - 1;
  return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * a * a * a * a * a;
}
function inExpo(t) {
  if (t === 0) {
    return 0;
  }
  return Math.pow(2, 10 * (t - 1));
}
function outExpo(t) {
  return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;
}
function inOutExpo(t) {
  if (t === 0 || t === 1)
    return t;
  const a = t * 2, b = a - 1;
  return a < 1 ? 0.5 * Math.pow(2, 10 * b) : 0.5 * (-Math.pow(2, -10 * b) + 2);
}
function inCirc(t) {
  const a = t / 1;
  return -1 * (Math.sqrt(1 - a * t) - 1);
}
function outCirc(t) {
  const a = t - 1;
  return Math.sqrt(1 - a * a);
}
function inOutCirc(t) {
  const a = t * 2, b = a - 2;
  return a < 1 ? -0.5 * (Math.sqrt(1 - a * a) - 1) : 0.5 * (Math.sqrt(1 - b * b) + 1);
}
function inBack(t, magnitude = 1.70158) {
  return t * t * ((magnitude + 1) * t - magnitude);
}
function outBack(t, magnitude = 1.70158) {
  const a = t / 1 - 1;
  return a * a * ((magnitude + 1) * a + magnitude) + 1;
}
function inOutBack(t, magnitude = 1.70158) {
  const a = t * 2, b = a - 2, s = magnitude * 1.525;
  return a < 1 ? 0.5 * a * a * ((s + 1) * a - s) : 0.5 * (b * b * ((s + 1) * b + s) + 2);
}
function inElastic(t, magnitude = 0.7) {
  if (t === 0 || t === 1)
    return t;
  const a = t / 1, b = a - 1, p = 1 - magnitude, s = p / (2 * Math.PI) * Math.asin(1);
  return -(Math.pow(2, 10 * b) * Math.sin((b - s) * (2 * Math.PI) / p));
}
function outElastic(t, magnitude = 0.7) {
  const p = 1 - magnitude, a = t * 2;
  if (t === 0 || t === 1)
    return t;
  const s = p / (2 * Math.PI) * Math.asin(1);
  return Math.pow(2, -10 * a) * Math.sin((a - s) * (2 * Math.PI) / p) + 1;
}
function inOutElastic(t, magnitude = 0.7) {
  const p = 1 - magnitude;
  if (t === 0 || t === 1)
    return t;
  const a = t * 2, b = a - 1, s = p / (2 * Math.PI) * Math.asin(1);
  return a < 1 ? -0.5 * (Math.pow(2, 10 * b) * Math.sin((b - s) * (2 * Math.PI) / p)) : Math.pow(2, -10 * b) * Math.sin((b - s) * (2 * Math.PI) / p) * 0.5 + 1;
}
function outBounce(t) {
  const a = t / 1;
  if (a < 1 / 2.75) {
    return 7.5625 * a * a;
  }
  if (a < 2 / 2.75) {
    const b2 = a - 1.5 / 2.75;
    return 7.5625 * b2 * b2 + 0.75;
  }
  if (a < 2.5 / 2.75) {
    const b2 = a - 2.25 / 2.75;
    return 7.5625 * b2 * b2 + 0.9375;
  }
  const b = a - 2.625 / 2.75;
  return 7.5625 * b * b + 0.984375;
}
function inBounce(t) {
  return 1 - outBounce(1 - t);
}
function inOutBounce(t) {
  return t < 0.5 ? inBounce(t * 2) * 0.5 : outBounce(t * 2 - 1) * 0.5 + 0.5;
}

export { ease_exports, inBack, inBounce, inCirc, inCubic, inElastic, inExpo, inOutBack, inOutBounce, inOutCirc, inOutCubic, inOutElastic, inOutExpo, inOutQuad, inOutQuart, inOutQuint, inOutSine, inQuad, inQuart, inQuint, inSine, linear, outBack, outBounce, outCirc, outCubic, outElastic, outExpo, outQuad, outQuart, outQuint, outSine };
